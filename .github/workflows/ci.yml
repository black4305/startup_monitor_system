name: 🤖 CI/CD Pipeline - Startup Monitor System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🧪 테스트 및 코드 품질 검사
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4

    - name: 🐍 Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 캐시 설정 (pip)
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        # 경량화된 의존성 설치 (CI용)
        pip install flask flask-cors python-dotenv requests beautifulsoup4
        pip install pandas numpy scikit-learn
        # PyTorch CPU 버전 (빠른 설치)
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: 🔍 코드 스타일 검사 (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 단위 테스트 실행
      run: |
        # 기본 임포트 테스트
        python -c "import sys; sys.path.insert(0, '.'); from core.app import main; print('✅ 메인 앱 임포트 성공')"
        # 추가 테스트가 있다면 pytest 실행
        # pytest tests/ --cov=core --cov-report=xml

  # 🐳 Docker 이미지 빌드 및 배포
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4

    - name: 🐳 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Docker Hub 로그인
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 📝 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/startup-monitor-system
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 자동 배포 (선택사항)
  deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 🚀 배포 알림
      run: |
        echo "🎉 배포 완료!"
        echo "🔗 애플리케이션 URL: https://your-app-url.com"
        
    # 실제 배포 단계들을 여기에 추가
    # 예: AWS, Azure, Google Cloud 등으로 배포

  # 📊 코드 품질 분석
  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 SonarCloud 스캔
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
